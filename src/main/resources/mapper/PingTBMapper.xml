<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.example.dao.PingTBMapper">

    <select id="selectPingById" resultType="com.mybatis.example.entity.PingTB">
        select * from ping_tb where id = #{id}
    </select>

    <select id="selectPingByBizId2" parameterType="int" resultType="hashmap">
        select * from ping_tb where bizid = #{BizId}
    </select>

    <select id="selectPingByBizId3" parameterType="int" resultType="hashmap">
        select id,userid,listingid,bizid,zuid,dingid from ping_tb where bizid = #{BizId}
    </select>

    <resultMap id="resultMapPing" type="com.mybatis.example.entity.PingTB">
        <id column="id" property="id"></id>
        <result column="userid" property="userid"></result>
        <result column="listingid" property="listingid"></result>
        <result column="bizid" property="bizid"></result>
        <result column="zuid" property="zuid"></result>
        <result column="dingid" property="dingid"></result>
        <result column="months" property="months"></result>
        <result column="credit_score" property="creditScore"></result>
        <result column="credit_level" property="creditLevel"></result>
        <result column="credit_bin" property="creditBin"></result>
        <result column="credit_level_pro" property="creditLevelPro"></result>
        <result column="model_label" property="modelLabel"></result>
        <result column="model_ver" property="modelVer"></result>
        <result column="process_flag" property="processFlag"></result>
        <result column="block_days" property="blockDays"></result>
        <result column="info" property="info"></result>
        <result column="inserttime" property="insertTime"></result>
        <result column="updatetime" property="updateTime"></result>
        <result column="isactive" property="isActive"></result>
    </resultMap>


    <select id="selectPingByBizId" resultMap="resultMapPing">
        select * from ping_tb where bizid = #{BizId}
    </select>

    <select id="selectPingByBizId4" resultMap="resultMapPing">
        select id,userid,listingid,bizid,zuid,dingid from ping_tb where bizid = #{BizId}
    </select>

    <!--插入单条-->
    <insert id="insertOne" useGeneratedKeys="true" keyProperty="id">
        insert into ping_tb (userid,listingid,bizid,zuid,dingid,months,credit_score,credit_level,credit_bin,credit_level_pro,model_label,model_ver,process_flag,block_days,info,insertTime,updatetime)
        values (#{userid},#{listingid},#{bizid},#{zuid},#{dingid},#{months},#{creditScore},#{creditLevel},#{creditBin},#{creditLevelPro},#{modelLabel},#{modelVer},#{processFlag},#{blockDays},#{info},NOW(),NOW())
    </insert>

    <!--批量insert操作-->
    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
        insert into ping_tb (userid,listingid,bizid,zuid,dingid,months,credit_score,credit_level,credit_bin,credit_level_pro,model_label,model_ver,process_flag,block_days,info,insertTime,updatetime)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.userid},#{item.listingid},#{item.bizid},#{item.zuid},#{item.dingid},#{item.months},#{item.creditScore},#{item.creditLevel},#{item.creditBin},#{item.creditLevelPro},#{item.modelLabel},#{item.modelVer},#{item.processFlag},#{item.blockDays},#{item.info},NOW(),NOW())
        </foreach>
    </insert>

    <!--更新-->
    <update id="updateById">
        update ping_tb set userid = #{userid},listingid = #{listingid},bizid = #{bizid},process_flag = #{processFlag},info = #{info},updatetime = NOW() where id = #{id}
    </update>

    <!--批量查询-->
    <select id="batchSelect" resultType="com.mybatis.example.entity.PingTB">
        select  * from ping_tb where id in
        <foreach collection="ids" item="pingTBId" open="(" close=")" separator=",">
            #{pingTBId}
        </foreach>
    </select>
    <!--批量删除-->
    <delete id="batchDelete" parameterType="int[]">
        delete from ping_tb where id in
        <foreach collection="array" item="arr" index="no" open="(" separator="," close=")">
            #{arr}
        </foreach>
    </delete>

    <!--删除-->
    <delete id="deleteById">
        delete from ping_tb where  id = #{id}
    </delete>


    <!-- 定义sql片段，Id是唯一标识
         建议：是基于单表来定义sql片段，这样的话sql片段的可重用性才高，在sql片段中不要包含where
         传递单个的对象 对象名称需要早PingTBMapper.class接口中 使用@Param进行标识出来 @Param(value = "pingTBVo"
     -->
    <sql id="query_ping_where" >
        <if test="pingTBVo!=null">
            <if test="pingTBVo.userid!=null and pingTBVo.userid!='' ">
                and userid=#{pingTBVo.userid}
            </if>
            <if test="pingTBVo.listingid!=null and pingTBVo.listingid!='' ">
                and listingid=#{pingTBVo.listingid}
            </if>
            <if test="pingTBVo.bizid!=null and pingTBVo.bizid!='' ">
                and bizid=#{pingTBVo.bizid}
            </if>
        </if>
    </sql>

    <!-- 用户信息综合查询
        #{pingTBVo.userid}:取出pojo包装对象中性别值
        ${pingTBVo.listingid}：取出pojo对象中用户名称
    -->
    <select id="findPingList" parameterType="com.mybatis.example.vo.PingTBVo" resultType="com.mybatis.example.entity.PingTB">
        select * from ping_tb
        <!-- 动态sql查询：where可以自动去掉第一个and -->
        <where>
            <!-- 引用sql片段的id，如果refid指定的不在本mapper.xml中，需要前边加namespace -->
            <include refid="query_ping_where"></include>
            and
            isactive = true
            <!-- 这里可以引用其它的sql片段 -->
        </where>
    </select>

    <sql id="cols">
        id,userid,listingid,bizid,zuid,dingid
    </sql>

    <select id="selectPingByBizId5" resultMap="resultMapPing">
        select <include refid="cols"></include>
        from ping_tb where bizid = #{BizId}
    </select>

    <!--映射回来 自动分装到指定的类中-->
    <select id="selectPingById1" resultType="com.mybatis.example.model.PingModel">
        select userid,listingid from ping_tb where id = #{id}
    </select>

    <resultMap id="detailedBlogResultMap" type="Blog">
        <constructor>
            <idArg column="blog_id" javaType="int"/>
        </constructor>

        <result property="title" column="blog_title"/>

        <association property="author" javaType="Author">
            <id property="id" column="author_id"/>
            <result property="username" column="author_username"/>
            <result property="password" column="author_password"/>
            <result property="email" column="author_email"/>
            <result property="bio" column="author_bio"/>
            <result property="favouriteSection" column="author_favourite_section"/>
        </association>

        <collection property="posts" ofType="Post">
            <id property="id" column="post_id"/>
            <result property="subject" column="post_subject"/>
            <association property="author" javaType="Author"/>
            <collection property="comments" ofType="Comment">
                <id property="id" column="comment_id"/>
            </collection>
            <collection property="tags" ofType="Tag" >
                <id property="id" column="tag_id"/>
            </collection>
            <discriminator javaType="int" column="draft">
                <case value="1" resultType="DraftPost"/>
            </discriminator>
        </collection>

    </resultMap>

    <select id="selectBlogDetails" resultMap="detailedBlogResultMap">
        select
           B.id as blog_id,
           B.title as blog_title,
           B.author_id as blog_author_id,
           A.id as author_id,
           A.username as author_username,
           A.password as author_password,
           A.email as author_email,
           A.bio as author_bio,
           A.favourite_section as author_favourite_section,
           P.id as post_id,
           P.blog_id as post_blog_id,
           P.author_id as post_author_id,
           P.created_on as post_created_on,
           P.section as post_section,
           P.subject as post_subject,
           P.draft as draft,
           P.body as post_body,
           C.id as comment_id,
           C.post_id as comment_post_id,
           C.name as comment_name,
           C.comment as comment_text,
           T.id as tag_id,
           T.name as tag_name
        from Blog B
           left outer join Author A on B.author_id = A.id
           left outer join Post P on B.id = P.blog_id
           left outer join Comment C on P.id = C.post_id
           left outer join Post_Tag PT on PT.post_id = P.id
           left outer join Tag T on PT.tag_id = T.id
        where B.id = #{id}
    </select>


</mapper>